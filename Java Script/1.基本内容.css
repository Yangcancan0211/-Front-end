/*  
  !补充
  (1)hidden属性:设置元素是否可见,不占空间
       监听btn点击事件
  (2)全局变量的使用细节:
  (3) 对数据的展示: 1>对于固定的数据,直接通过html编写    2>对于大量的数据,有规律的数据,可以通过js编写
  1.浏览器内核:
    Trident: IE内核 Gecko: 火狐内核 Webkit: 苹果和谷歌内核 Presto: 欧朋内核(已停止更新)
  2.JavaScript引擎:
    V8: 谷歌和苹果(webkit)内核 SpiderMonkey: 火狐内核 Chakra: IE内核 JavaScriptCore: 苹果内核
  3.Js编写方法(编写在HTML中)
    内联式: <标签 属性="属性值" ... on事件="js代码">内容</标签> 编写在html元素之中
    内部式: <script>js代码</script> 编写在script标签之中
    外部式: <script src="文件路径"></script> 编写在外部文件中 用src属性引入
  4.noscript元素的使用(有一些浏览器不支持Js)
    <noscript>当浏览器不支持Js时显示的内容</noscript>
  5.Js的注意事项
  (1)script不能写成单标签元素
  (2)加载顺序 推荐将js文件放在body结束标签前
    内联式 > 内部式 > 外部式
  (3)js严格区分大小写
  6.Js的交互工具
  (1)alert函数
  alert("提示信息");
  (2)console.log函数 将内容输出到控制台中
    console.log("输出内容");
  (3)document.write函数
    document.write("输出内容");
  (4)prompt函数(获取用户输入的信息)
    var 变量名 = prompt("提示信息","默认值");
  (5)confirm函数
    var 变量名 = confirm("提示信息");
  7.Js的语句和分号
  8.Js的注释
  //单行注释
  /* 多行注释
  /**文档注释 (JSDoc)
  9.Js的变量和数据结构
  (1)变量的定义 存放的数值可以变化
    var 变量名 = 值;
    let 变量名 = 值; (ES6)
    const 变量名 = 值; (ES6) 常量
  (2)数据类型(动态类型)
    一般都使用var定义变量,数据类型会自动转换,变量可以变化(前一刻是数字,后一刻可以是字符串)
    基本数据类型: Number(数字) String(字符串) Boolean(布尔值) Null(空值) Undefined(未定义) Symbol(符号)(ES6)
    引用数据类型: Object(对象) Array(数组) Function(函数)
    String:本身拥有的方法和属性
    eg:
       name.length;//字符串的长度
       name.charAt(1);//获取指定位置的字符
       name.indexOf("三");//查找指定字符的位置
       name.toUpperCase();//转换为大写
       name.toLowerCase();//转换为小写
       name.concat("，你好");//字符串拼接
       name.substring(0,1);//截取字符串
       name.split("");//将字符串转换为数组
       name.replace("张三","李四");//替换字符串
       name.trim();//去除字符串两端的空格
       name.repeat(3);//重复字符串
       name.startsWith("张");//判断字符串是否以指定字符开头
       name.endsWith("三");//判断字符串是否以指定字符结尾 
       name.includes("三");//判断字符串是否包含指定字符
       name.valueOf();//返回字符串的原始值
  (3)typeof运算符
    typeof 变量名; 返回变量的数据类型
  (4)数据类型的转换 
  隐式转换:
  显示转换函数: Number() String() Boolean()
  (5)引号的使用
    单引号('') 双引号("") 反引号(``) (ES6)
    反引号可以实现字符串的拼接和换行
  (6)转义字符
    \n 换行 \t 制表符 \\ 反斜杠 \' 单引号 \" 双引号 \` 反引号 \$ 美元符号
  (7)常量的定义(ES6)
    const PI = 3.14;
    常量一旦定义,值就不能修改,否则会报错
  10.运算符
    算术运算符 + - * / % ++ --
    赋值运算符 = += -= *= /= %=
    比较运算符 == === != !== > < >= <=   eg:==在类型不同的情况下,会将数据类型转换后再进行比较 ===不会进行类型转换:在类型不相等的情况下,直接返回false 
    逻辑运算符 && || !
    三元运算符 条件 ? 表达式1 : 表达式2
    逗号运算符 , (从左到右依次计算,返回最后一个表达式的值)
    typeof 运算符
    + 连接运算符(字符串拼接)
    优先级: () > ++ -- > 算术运算符 > 比较运算符 > 逻辑运算符 > 赋值运算符 > , 
    注意: ++ -- 只能单独使用,不能连用
    求幂运算符(ES7): **  a**b (a的b次方)
  11.分支语句
   if switch if else
  12.循环语句
   for while do while for in for of
  13.JS的函数:并不是一种语法结构,是一种特殊的值
  (1)函数的定义和调用
   foo,bar,baz 伪变量
   声明:function 函数名(形参1,形参2...){函数体 return 返回值;}
   调用: 函数名(实参1,实参2...);
   函数可以作为另一个函数的参数
   函数作为另一个函数的返回值
   将函数存储在另一个数据结构里面
  (2)arguments是一个对象
   用来遍历
  (3)作用域(变量作用范围)
  全局作用域:在整个程序里面都可以访问
  块级作用域:在{}代码块内可访问
  (4)变量:优先访问自己函数的变量,没有找到就去外部寻找
  全局变量:定义在script中声明的变量(在任意函数都可以看到)
  局部变量:定义在函数内部的变量
  外部变量:定义在函数外面定义的变量 
  (5)不同的函数
  高阶函数:接收一个或多个函数作为输入 也可以输出一个函数
  立即执行函数:定义完被立即执行 (定义一个匿名函数,再调用函数)
  1.在立即函数里面定义的变量是有自己的作用域,外部不能访问
  2.应用场景:防止全局变量的命名冲突
  eg:1.(function bar(){  第一步先定义一个匿名函数
        console.log("bar函数立即执行");
        })()   第二步()用来调用函数
     2.(function(fn){
       //匿名函数
        }());
  13.chrome的调试debug技巧
   debugger标识符就是在代码中打断点的方式  
   放在断点之前,会在断点停止操作
   setTimeout浏览器提供的定时器高阶函数
   eg:setTimeout(function(),time)
  14.面向对象(存储键值对的更复杂的数据类型) 
  (1)key:value(任意类型)
  key:字符串类型,但是在定义对象的属性名时,大部分情况下引号都可以省略
    属性:用,隔开
    行为:eg:run:function(){},
  !(2)对象的遍历方式:
   1.普通for循环:Object.keys()
   2.for in遍历
  (3)this
  this大多数时候都是指向一个对象
  1.函数被默认调用时,this指向window
  2.函数被某一个对象来引用并且调用它,那么this会指向这个对象
  (4)类和对象
  1.创建一系列的对象 使用函数(传递参数)
  工厂函数->一种设计模式
  用new操作符创建新对象
  2.类class和对象的关系
  3.全局对象window:
  浏览器中存在一个全局对象Object->window
  作用一:查找变量时,最终找到window
  作用二:将一些浏览器全局提供的变量/函数/对象,放在window对象上面
  作用三(了解):使用var定义的变量默认添加到window上面
  4.函数本质上也是对象
  eg:var foo=function(){} === var foo=new Function()
  5.类之间的继承关系:extends
  !(5).常见内置类
  1.包装类型
  在调用原始属性或方法时,内部的操作 name=new String(name)
  原始类型默认可以手动创建类型
  String Number Boolean
  2.Number类型的使用
    获取整数integer
    eg: console.log(Number.MAX_VALUE);
        console.log(Number.MIN_VALUE);
    进制转换toString(进制)默认是十进制进行转换
    eg:console.log(num.toString(2));//转成二进制
      console.log(num.toString(8));//转成八进制
      console.log(num.toString(16));//转成十六进制
    格式化数字toFixed(digits)格式化数字,保留digits位小数 范围为0~20之间
    Number.parselnt(string[,radix]):将字符串解析成整数,也有对应的全局方法parselnt
    Number.parseFloat(string),将字符串解析成浮点数
  3.Math
    Math.abs() 绝对值
    Math.random() 生成0-1之间的随机小数
    Math.floor() 向下取整
    Math.ceil() 向上取整
    Math.round() 四舍五入取整
    Math.pow(x,y) 返回x的y次幂
    生成指定范围内的随机整数: Math.floor(Math.random()*(max-min+1))+min;
  4.String类型
    length 获取字符串长度
    charAt() 访问某个位置的字符
    遍历方法:普通for遍历和for of遍历
    eg:  for(var i=0;i<message.length;i++){
            console.log(message.charAt(i);
        }
         for (var char of message){
            console.log(message);
        }
    toUpperCase()变成大写
    toLowerCase()变成小写
    判断字符串中是否含另一个字符串
       (1)indexOf(searchString, fromIndex) 找到返回字符串所在索引,未找到返回-1
       (2)includes() 
       (3)startWith() 判断以xxx开头
       (4)endsWith() 判断以xxx结尾 
    replace(被替换的字符串,要替换的字符串)替换字符串
    获取子字符串
       (1)slice(start,end) 不含end 允许负值
       (2)substring(start,end) 不含end 负值为0
       (3)subst(start,length) 从start开始获取长度为length的字符串 start可以为负数
    拼接字符串
       (1)str1+str2+str3......
       (2)concat链式调用 
        eg: var newString1=str1.concat(str2).concat(str3)
            var newString2=str1.concat(str2,str3,"abc","123")
    str.trim() 删掉首尾的空格
        eg:  console.log("     what    sbc   ".trim());
    str.splist() 字符串的切割
       eg: var info1="abc-123-cba-111"
           var items=info1.split("-")
            console.log(items);
    str.join() 添加字符
       eg:var newMessage=items.join("*")
          console.log(newMessage);
  15.函数和方法
  函数:在javascript代码中通过function定义的一个结构
  方法:将一个函数放在对象中,作为对象的一个属性
  16.Javascript的内存分配
  内存分为:栈内存和堆内存
  原始类型占据的空间在栈内存中分配
  数据类型占据的空间在堆内存中分配
  !17.数组Array
    (1)创建数组[ , , ]
       类Array:var arr = new Array()
    (2)数组的访问
     根据索引
     数组.at():可以为负数,从后往前数
    (3)添加元素
    中间添加:splice()  (start,0,str,...) deleteCount=0
    头部添加:unshift() 整个数组向后移动
    尾部添加:push   eg:names.push( , , , )
    (4)删除元素
    中间删除:splice() (start,deleteCount)
    头部删除:shift() 整个数组向前移动
    尾部删除:pop    eg:names.pop()
    (5)替换元素splice() (start,deleteCount,str...)
    (6)数组长度 length 属性可写(可以赋值)
    (7)数组的遍历
        (普通for) (for in)得到索引 (for of)直接得到数组的值
    (8)slice截取数组  slice(start,end)不包含end
    (9)concat拼接数组  
    (10)join添加字符
    (11)查找元素
      1.indexOf 找到返回索引 未找到返回-1
      2.find高阶函数:eg:  var stu = students.find(function(item){
                          if(item.id==101)  return true  })
      3.forEach函数: array.forEach(function(currentValue, index, arr), thisValue)
            currentValue：当前元素的值（必需） index：当前元素的索引（可选）
            arr：当前正在遍历的数组（可选）  thisValue：执行回调函数时使用的this值（可选）
      4.includes()
      5.findIndex查找索引   eg:Array.findIndex(function(item,index,arr){})
    (12)排序和反转
      sort排序: 升序 item1-item2(随便写什么)
                eg:  num.sort(function(item1,item2){
                        return item1-item2})
                升序 item2-item1或者reverse()反转
                 eg:num.reverse() 
  18.Date对象
     dateString时间表示方式:.toDateString()/.toIOSString()
      自己修改表示方法:getMonth()获取月份 getFullYear()获取年份 getDate()具体日期
      自动校验:setDate() 自动会修正
      获取Unix时间戳:Date.now()当前的时间戳  date.getTime()/date.valueOf()获取date对象的时间戳
      计算操作所花的时间:endTime-starTime startTime=Date.now() endTime=Date.now()
      将字符串时间转成时间戳:Date.parse(str)从一个字符串读取日期,并输出相应的时间戳
  19.DOM文档对象模型:将网页所有内容表示为可以修改的对象
    (1)document.body:获取body元素 document.head:获取head元素
    (2)DOM Tree:在html结构中,最终会形成一个树结构(继承)
    (3)document节点表示在整个载入的页面,它的实例是全局的document对象
    (4)获取任意的元素:getElementById()/getElementsByTagName()/getElementsByClassName()
      或者通过选择器查询:querySelector()只找第一个符合条件的元素/querySelectorAll()找所有符合条件的元素
      可迭代对象:string/数组/NodeList节点的集合
    (5)获取节点:innerHTML/innerText/textContent/value
      innerHTML:获取节点的HTML内容,可以包含标签
      innerText:获取节点的文本内容,不包含标签
      textContent:获取节点的文本内容,不包含标签
      value:获取表单元素的值 
    (6)元素的特性和属性
      1.attribute的分类  元素中的属性叫attribute
       (1)标准属性:元素天生就有的属性,比如id,class,title,style等
       (2)自定义属性:用户自己定义的属性,比如data-*等
       dataset属性:用于获取自定义属性的值,比如data-*属性的值可以通过dataset.*获取
       (3)事件属性:以on开头的属性,比如onclick,onmouseover等
       (4)布尔属性:值为true或false的属性,比如checked,disabled等
      !2.所有attribute都支持的操作
       (1)getAttribute()方法:获取元素的属性值
       (2)hasAttribute()方法:判断元素是否有某个属性
       (3)setAttribute()方法:设置元素的属性值
       (4)removeAttribute()方法:移除元素的属性
      !3.property的操作 对象中的属性叫property
       (1)获取property:直接通过点语法获取,比如div.id,div.className等
       (2)设置property:直接通过点语法设置,比如div.id="newId",div.className="newClass"等
      4.通过property获取attribute,通过点语法获取,比如div.id,div.className等
      5.通过property设置attribute,通过点语法设置,比如div.id="newId",div.className="newClass"等
      (6).style和class的区别
         1.style:直接通过点语法获取,比如div.style.backgroundColor等(单独修改一个css样式)
         2.非内联样式style的读取:getComputedStyle()方法 eg:getComputedStyle(div).backgroundColor
         3.class:直接通过点语法获取,比如div.className等,但会替换整个类中的字符串
         4.classList:通过类列表操作类,比如div.classList.add("newClass")等
      (7).创建和插入元素
         1.document.write()方法:向文档写入内容
         2.createElement()方法:创建元素节点
         3.appendChild()方法:将元素添加到父元素的最后面
         4.innerHTML()方法:将HTML字符串插入到指定位置
         5.insertBefore()方法:将元素添加到指定元素的前面
      (8).移除和克隆元素
         1.removeChild()方法:移除元素的子元素
         2.cloneNode()方法:克隆元素节点
      (9)元素的大小和位置
         1.clientWidth/clientHeight:元素内容区域的宽度/高度,不包含内边距,边框,滚动条
         2.offsetWidth/offsetHeight:元素内容区域的宽度/高度,包含内边距,边框,滚动条
         3.scrollWidth/scrollHeight:元素内容区域的宽度/高度,包含内边距,边框,滚动条,超出部分的宽度/高度
         4.getBoundingClientRect():获取元素的位置信息,返回一个对象,包含top,left,right,bottom,width,height等属性
         5.outerWidth/outerHeight:元素内容区域的宽度/高度,包含内边距,边框,滚动条,超出部分的宽度/高度
         6.scrollX/scrollY:窗口的滚动区域,水平/垂直方向的滚动距离
  20.事件:web事件
    (1)事件的分类:
      (1)鼠标事件:click,mouseover,mouseout,contextmenu,dbclick,mouseup,mousedown
      mouseover和mouseout:鼠标进入和离开元素时触发,会冒泡
      mouseenter和mouseleave:鼠标进入和离开元素时触发,不会冒泡,不能用事件委托
      mouseover和mouseenter的应用:1.监听button元素的本身
      (2)键盘事件:keydown事件先发生,keyup文本输入完成,keypress文本在输入等 event.key获取键值 event.code获取键码
      (3)表单事件:submit提交,reset重置,change内容发生改变,input输入内容,focus获取焦点,blur失去焦点等
      (4)窗口事件:load,resize,scroll等
      (5)文档加载事件:load文档中所有资源都加载完成,DOMContentLoaded文档中DOM树加载完成,resize,scroll等
    (2)事件的绑定:三种处理方式
      (1)行内事件:直接在HTML标签中绑定事件,比如onclick="alert('hello')"
      (2)内部事件:在JavaScript代码中绑定事件,比如div.onclick=function(){}
      (3)外部事件:在外部JavaScript文件中绑定事件,比如div.addEventListener("click",function(){});
    (3)事件的传播:默认情况是冒泡,可以通过addEventListener()方法的第三个参数设置为true,实现事件捕获
      (1)事件冒泡:从内到外,依次触发事件addEventListener("click",function(){})
      (2)事件捕获:从外到内,依次触发事件addEventListener("click",function(){},true)
    (4)事件的对象
       (1)event对象:事件触发时,会自动创建一个event对象,包含事件的相关信息
       (2)事件常见的属性:type类型,target发生的元素,currentTarget处理的元素,stopPropagation(),preventDefault()
        eventPhase:阶段 1-捕获 2-目标 3-冒泡    offsetX/offsetY:事件发生在元素的位置 
        clientX/clientY:发生在客户端内的位置    pageX/pageY:发生在页面内的位置   screenX/screenY:发生在屏幕内的位置
       eg.event.type  event.target  event.currentTarget
        (3)事件的方法:stopPropagation()阻止事件冒泡或者捕获,preventDefault()阻止默认行为
        (4)EventTarget中常见的方法:addEventListener()监听事件,removeEventListener()移除事件监听函数,dispatchEvent()派发事件
        removeEventListener(事件,函数名称)
    (5)事件中的this的指向:    
       (1)默认指向:事件处理函数中的this,默认指向触发事件的元素
          this===currentTarget
       (2)改变指向:可以通过call(),apply(),bind()方法改变this的指向
    (6)事件委托:利用事件冒泡的机制,将事件处理函数绑定在父元素上,当子元素触发事件时,会冒泡到父元素上,从而触发事件处理函数
  21.window中的定时器
     setTimeout()推迟一段时间后执行一次
     setInterval()允许重复运行一个函数,从一段时间间隔后开始运行,之后连续时间间隔执行
     clearTimeout()清除setTimeout()定时器
     clearInterval()清除setInterval()定时器
  22:BOM浏览器对象模型:由浏览器提供的用于处理文档之外的所有内容的其他对象
  !前端路由核心:修改URL,但页面不刷新  实现方法:(1)hashchange事件 (2)HTML5的history对象
     window对象:浏览器窗口对象,包含浏览器的所有属性和方法
     history对象:浏览器历史记录对象,包含浏览器的所有历史记录
         常见的属性:length,state
         常见方法:pushState()打开一个指定地址,replaceState()打开一个新地址,back()返回上一级,forward()前进,go()跳转
     location对象:浏览器地址栏对象,包含浏览器的当前地址 
        常见的属性:href,host,hostname,pathname,port,protocol,search
    URLSearchParams对象:浏览器地址栏对象,包含浏览器的当前地址的查询字符串参数
    get获取参数值,set设置参数值,append添加参数,has判断是否有参数
  23.JSON对象:JavaScript对象表示法,用于在浏览器和服务器之间传输数据
          (1)JSON.stringify()将JavaScript对象转换为JSON字符串
          (2)JSON.parse()将JSON字符串转换为JavaScript对象
          格式:简单值-对象值-数组值-函数值-日期值-正则值-空值]
        JSON的序列化:将JavaScript对象转换为JSON字符串
        格式:JSON.stringify(对象)  replace()方法替换空格 space参数
        示例:JSON.stringify({name:"张三",age:18}).replace(/\s+/g,"")
      !注意:JSON.stringify()方法会忽略对象的不可枚举属性,函数属性,undefined属性
      parse()方法:将JSON字符串转换为JavaScript对象
        格式:JSON.parse(字符串,function(key,value){})
    24.JS中监视动画结束
      (1)animationend事件:动画结束时触发
        示例:
        element.addEventListener("animationend",function(){
          console.log("动画结束")
        })
        (2)transitionend事件:过渡结束时触发
        示例:
        element.addEventListener("transitionend",function(){
          console.log("过渡结束")
        })
        (3)可以使用定时器
        setTimeout(function(){
          console.log("动画结束")
        },1000)
        */
        